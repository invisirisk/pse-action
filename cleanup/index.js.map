{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://javascript-action/../../../usr/local/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://javascript-action/external node-commonjs \"fs\"","../webpack://javascript-action/webpack/bootstrap","../webpack://javascript-action/webpack/runtime/compat","../webpack://javascript-action/./cleanup.js"],"sourcesContent":[null,"module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst http = require(\"@actions/http-client\");\n\n\nconst fs = require('fs');\n\n// most @actions toolkit packages have async methods\nasync function run() {\n  try {\n\n    core.debug(\"cleanup - start\");\n    client = new http.HttpClient(\"pse-action\", [], {\n      ignoreSslError: true,\n    });\n    const base = process.env.GITHUB_SERVER_URL + \"/\";\n    const repo = process.env.GITHUB_REPOSITORY;\n\n\n    const q = new URLSearchParams({\n      build_url: base + repo + \"/actions/runs/\" + process.env.GITHUB_RUN_ID + \"/attempts/\" + process.env.GITHUB_RUN_ATTEMPT,\n      status: process.env.GITHUB_RUN_RESULT\n    });\n    await client.post('https://pse.invisirisk.com/end', q.toString(),\n      {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      }\n    );\n    core.debug(\"cleanup - done\");\n  } catch (error) {\n    core.info(\"end post failed with message \" + error.message);\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}