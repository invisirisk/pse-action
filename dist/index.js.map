{"version":3,"file":"index.js","mappings":";;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://javascript-action/../../../usr/local/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://javascript-action/external node-commonjs \"dns\"","../webpack://javascript-action/external node-commonjs \"fs\"","../webpack://javascript-action/external node-commonjs \"util\"","../webpack://javascript-action/webpack/bootstrap","../webpack://javascript-action/webpack/runtime/compat","../webpack://javascript-action/./index.js"],"sourcesContent":[null,"module.exports = require(\"dns\");","module.exports = require(\"fs\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst github = require('@actions/github');\n\nconst http = require(\"@actions/http-client\");\n\nconst fs = require('fs');\nconst exec = require('@actions/exec')\nconst glob = require('@actions/glob');\n\nconst dns = require('dns')\nconst util = require('util')\n\n\nasync function iptables() {\n\n  await exec.exec(\"apk\", [\"add\", \"iptables\", \"bind-tools\", \"ca-certificates\"], silent = true,\n    stdout = (data) => {\n    },\n    stderr = (data) => {\n    },\n  )\n  await exec.exec(\"iptables\", [\"-t\", \"nat\", \"-N\", \"pse\"], silent = true)\n  await exec.exec(\"iptables\", [\"-t\", \"nat\", \"-A\", \"OUTPUT\", \"-j\", \"pse\"], silent = true)\n\n  const lookup = util.promisify(dns.lookup);\n  const dresp = await lookup('pse');\n  await exec.exec(\"iptables\",\n    [\"-t\", \"nat\", \"-A\", \"pse\", \"-p\", \"tcp\", \"-m\", \"tcp\", \"--dport\", \"443\", \"-j\", \"DNAT\", \"--to-destination\", dresp.address + \":12345\"],\n    silent = true,\n    stdout = (data) => {\n    },\n    stderr = (data) => {\n    },\n  )\n\n}\n\nasync function caSetup() {\n  client = new http.HttpClient(\"pse-action\", [], {\n    ignoreSslError: true,\n  });\n\n  const res = await client.get('https://pse.invisirisk.com/ca');\n  if (res.message.statusCode != 200) {\n    core.error(\"error getting ca certificate, status \" + res.message.statusCode)\n    throw \"error getting ca  certificate\"\n  }\n  const cert = await res.readBody()\n\n  const caFile = \"/etc/ssl/certs/pse.pem\";\n  fs.writeFileSync(caFile, cert);\n  await exec.exec('update-ca-certificates');\n\n  await exec.exec('git', [\"config\", \"--global\", \"http.sslCAInfo\", caFile]);\n  core.exportVariable('NODE_EXTRA_CA_CERTS', caFile);\n\n}\n\nasync function checkCreate() {\n  /*\n    const token = core.getInput('github-token');\n    const octokit = new github.getOctokit(token);\n    await octokit.rest.checks.create({\n      owner: github.context.repo.owner,\n      repo: github.context.repo.repo,\n      name: 'Readme Validator',\n      head_sha: github.context.sha,\n      status: 'completed',\n      conclusion: 'failure',\n      output: {\n        title: 'README.md must start with a title',\n        summary: 'Please use markdown syntax to create a title',\n      }\n    });\n    */\n}\n\n// most @actions toolkit packages have async methods\nasync function run() {\n  try {\n    let base = process.env.GITHUB_SERVER_URL + \"/\";\n    let repo = process.env.GITHUB_REPOSITORY;\n\n    await iptables();\n\n    client = new http.HttpClient(\"pse-action\", [], {\n      ignoreSslError: true,\n    });\n\n    await caSetup();\n\n    await checkCreate();\n\n    let q = new URLSearchParams({\n      'builder': 'github',\n      'build_id': process.env.GITHUB_RUN_ID,\n      build_url: base + repo + \"/actions/runs/\" + process.env.GITHUB_RUN_ID + \"/attempts/\" + process.env.GITHUB_RUN_ATTEMPT,\n      project: process.env.GITHUB_REPOSITORY,\n      builder_url: base,\n      scm: 'git',\n      scm_commit: process.env.GITHUB_SHA,\n      //      scm_prev_commit = process,\n      scm_branch: process.env.GITHUB_REF_NAME,\n      scm_origin: base + repo,\n    });\n    await client.post('https://pse.invisirisk.com/start', q.toString(),\n      {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      }\n    );\n  } catch (error) {\n    core.setFailed(error.message);\n  }\n}\n\nrun();\n"],"names":[],"sourceRoot":""}